// プラグイン定義 利用できるタスク(gradle tasks)が増える
apply {
    plugin 'groovy' // Viewテンプレートにgroovyを使用しているので、javaではなくgroovyを宣言
    plugin 'war'
    plugin 'tomcat'
    plugin "idea"
    plugin 'findbugs'
}

// 各環境にバージョンを揃えたうえでgradleをインストールするのは大変なので、
// gradlewコマンドを利用する。
task wrapper(type: Wrapper) {
    gradleVersion = '1.12'
    jarFile = "${project.projectDir}/etc/gradle/wrapper/gradle-wrapper.jar"
}

findbugs {
    toolVersion = "3.0.0"
    sourceSets = [sourceSets.main]
    ignoreFailures = true
    reportsDir = file("$project.buildDir/findbugsReports")
    effort = "max"
    reportLevel = "low"
//    excludeFilter = file("$rootProject.projectDir/gradle/findbugs/excludeFilter.xml")
}

// プロパティ設定
ext {
    defaultEncoding = 'UTF-8'
    javaVersion = '1.7'
    env = ''
}

// 環境ごとの設定を実施
apply from: file('etc/gradle/environment.gradle')

// 環境ごとにデフォルト文字コードが違うので、コンパイル時の文字コードを指定する
compileJava.options.encoding = defaultEncoding
compileGroovy.options.encoding = defaultEncoding
compileTestJava.options.encoding = defaultEncoding

repositories {
    mavenCentral()
}

// デフォルトのディレクトリ構成から以下の要素を追加する
sourceSets {
    main {
        java.srcDirs = []
        groovy.srcDirs = ['src/main/java']
        resources {
            srcDir 'src/main/java'
        }
        // TomcatがContextを自動リロードするために、クラスファイルの出力先を変更
        output.classesDir = 'src/main/webapp/WEB-INF/classes'
    }

    test {
        java.srcDirs = []
        groovy.srcDirs = ['src/test/groovy', 'src/test/java']
    }
}

// gradlew test コマンド実行時の処理
test {
    // テストする環境で使用する設定ファイルが異なる
    systemProperties 'environment': "${env}"

    // テスト失敗時の情報を標準より多く出力する設定
    testLogging.exceptionFormat = 'full'

    // VM引数に下記の設定をしないとcoberturaの実行が失敗する
    test.jvmArgs '-XX:-UseSplitVerifier'

    useJUnit {
        excludeCategories 'jp.co.biglobe.test.util.category.BrowserTestCategory'
        excludeCategories 'jp.co.biglobe.test.util.category.ScenarioTestCategory'
    }

    if ("${env}" == 'cloudHosting') {
        useJUnit {
            excludeCategories 'jp.co.biglobe.test.util.category.BrowserTestCategory'
            excludeCategories 'jp.co.biglobe.test.util.category.ScenarioTestCategory'
        }
    }

    // GradleでEnclosedテストが2回実行されることの対策（そのうちGradle側で対応してくれるようになるかも）
    exclude '**/*$*'

//    // Jenkinsのカバレッジ出力設定
//    def testmodeList = ['all', 'isp', 'fw', 'sample']
//    if (!hasProperty('testmode')) {
//        testmode = testmodeList[0]
//    }
//
//    if("${testmode}" == 'isp'){
//        exclude '**/framework/*'
//        exclude '**/plugin/*'
//        exclude '**/sample/*'
//    }

}

// gradlew war コマンド実行時の処理
war {
    baseName = 'mobile'
    version = '1.0'
}

// gradlew clean コマンド実行時の処理
clean {
    // "gradle clean"を実行した際に、Tomcat用の出力先も削除対象とする
    delete << 'src/main/webapp/WEB-INF/classes'
}

// gradlew tomcatRun コマンド実行時の処理
if ("${env}" == 'cloudHostingTomcat') {
    ext {
        tomcatContextPath = 'etc/tomcat/testing/context.xml'
    }
} else {
    ext {
        tomcatContextPath = 'etc/tomcat/development/context.xml'
    }
}
tomcatRun {
    httpPort = 7010
    reloadable = true
    contextPath = '/domain/mobile'
    configFile = file(tomcatContextPath)
    stopPort = 7011
    stopKey = 'stopkey'
}
tomcatStop {
    httpPort = 7010
    stopPort = 7011
    stopKey = 'stopkey'
}

ext {
    isplibraryVersion = '1.1.0'
    charsetVersion = '2.0'
    springframeworkVersion = '4.1.0.RELEASE'
    springDataCommonsVersion = '1.9.0.RELEASE'
    jacksonVersion = '2.4.2'
    aspectjVersion = '1.8.0'
    logbackVersion = '1.1.2'
    slf4jVersion = '1.7.7'
    hibernateValidatorVersion = '4.3.1.Final'
    mybatisVersion = '3.2.7'
    mybatisSpringVersion = '1.2.2'
    commonsDbcpVersion = '1.4'
    groovyVersion = '2.3.1'
    lombokVersion = '1.12.6'
    jodaTimeVersion = '2.3'
}

// 依存ライブラリの設定
dependencies {

    // BOでのオフラインビルド時は内部管理しているライブラリを参照
    if (file('repository').exists()) {
        compile fileTree(dir: 'repository', include: '*.jar')
    } else {

        // BO用Sprign拡張ライブラリ
        compile files("etc/library/production/isplibrary-${isplibraryVersion}.jar")

        // JAX-RS 関連
        compile "com.fasterxml.jackson.core:jackson-core:${jacksonVersion}"
        compile "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"

        // Spring 関連
        compile "org.springframework:spring-web:${springframeworkVersion}"
        compile "org.springframework:spring-webmvc:${springframeworkVersion}"
        compile "org.springframework:spring-tx:${springframeworkVersion}"
        compile "org.springframework:spring-jdbc:${springframeworkVersion}"
        compile "org.springframework.data:spring-data-commons:${springDataCommonsVersion}" // Pageableが依存してる

        // Spring AOP + AspectJ
        compile "org.springframework:spring-aop:${springframeworkVersion}"
        compile "org.aspectj:aspectjrt:${aspectjVersion}"
        compile "org.aspectj:aspectjweaver:${aspectjVersion}"

        // ロギング 関連
        compile "ch.qos.logback:logback-classic:${logbackVersion}"
        compile "org.slf4j:slf4j-api:${slf4jVersion}"

        // Servlet 関連
        testCompile "javax.servlet:servlet-api:3.0-alpha-1"
        providedCompile "javax.servlet:servlet-api:2.5"

        //    Spring MVC Test FrameworkがServlet 3.0系に依存しているので、プロダクトコード側のServletのバージョンと差異あり。
        //    http://docs.spring.io/spring/docs/4.0.x/spring-framework-reference/html/new-in-4.0.html#_general_web_improvements
        testCompile "org.apache.geronimo.specs:geronimo-servlet_3.0_spec:1.0"

        // テスト 関連
//        testCompile "junit:junit:4.11"
        testCompile 'junit:junit-dep:4.10' // 参照 http://futurismo.biz/archives/1172
        testCompile 'org.jmock:jmock-junit3:2.6.0'
        testCompile "org.mockito:mockito-all:1.9.5"
        testCompile "org.dbunit:dbunit:2.4.9"
        testCompile "uk.com.robust-it:cloning:1.9.0" // List/Mapのディープクローンを行うライブラリ
        testCompile "org.springframework:spring-test:${springframeworkVersion}"
        testCompile "org.springframework.batch:spring-batch-test:2.1.7.RELEASE"
        testCompile "com.jayway.jsonpath:json-path-assert:0.8.1"
        testCompile files("etc/library/development/h2storedprocedure-2.0.jar")
        testCompile files("etc/library/production/ojdbc6-11.2.0.4.jar")

        // バリデーション 関連
        compile "org.hibernate:hibernate-validator:${hibernateValidatorVersion}"

        // データベース 関連
//        compile "cglib:cglib:3.1" // mybatisとspringが利用しているライブラリ
        compile "org.mybatis:mybatis:${mybatisVersion}"
        compile "org.mybatis:mybatis-spring:${mybatisSpringVersion}"
        compile "commons-dbcp:commons-dbcp:${commonsDbcpVersion}"
        "${localLibraryConfigrations}" "com.h2database:h2:1.4.177" // ローカルTomcatとテストで使用
        "${localLibraryConfigrations}" files("etc/library/production/ojdbc6-11.2.0.4.jar") // ローカルTomcatとテストで使用

        // Groovy 関連
        compile "org.codehaus.groovy:groovy-all:${groovyVersion}"

        // EUCからUTF-8への変換ライブラリ
        compile files("etc/library/production/charset-${charsetVersion}.jar")

        // Getter/Setterアノテーション
        compile "org.projectlombok:lombok:${lombokVersion}"

        // 日付関連
        compile "joda-time:joda-time:${jodaTimeVersion}"

        // ファイルアップロード
        compile 'commons-io:commons-io:2.4'
        compile 'commons-fileupload:commons-fileupload:1.3.1'

        // Tomcatの設定
        def tomcatVersion = '7.0.53'
        tomcat "org.apache.tomcat.embed:tomcat-embed-core:${tomcatVersion}",
                "org.apache.tomcat.embed:tomcat-embed-logging-juli:${tomcatVersion}",
                "org.apache.tomcat:tomcat-dbcp:${tomcatVersion}"
        tomcat("org.apache.tomcat.embed:tomcat-embed-jasper:${tomcatVersion}") {
            exclude group: 'org.eclipse.jdt.core.compiler', module: 'ecj'
        }

    }

}

// Tomcatプラグインを利用するための定義
// 参照 https://github.com/bmuschko/gradle-tomcat-plugin
buildscript {
    dependencies {
        // オフラインビルドを実行するために、ローカルのjarを参照する
        classpath files("etc/library/development/gradle-tomcat-plugin-1.0.jar")
    }
}

// BOでのオフラインビルドで利用する媒体を集める
task releaseSource(type: Zip) {
    classifier = 'sources'
    from(projectDir) {
        exclude '.git'
        exclude '.gradle'
        exclude '.settings'
        exclude 'build'
    }
    into('repository') {
        from configurations.testCompile
    }
}

if ("${env}" == 'cloudHosting') {
    // カバレッジ取得用
    apply from: 'etc/gradle/cobertura.gradle'
    apply plugin: "jacoco" // カバレッジ取得用
    apply from: 'etc/gradle/jacoco.gradle'
}



